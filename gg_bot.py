import asyncio
import requests
import os
from math import radians, sin, cos, sqrt, atan2
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WAREHOUSE_COORDS = [53.136631, 25.805957]

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
user_data = {}

# üî• –¶–µ–Ω—ã
firewood_prices = {
    "–ë–µ—Ä–µ–∑–∞ –∫–æ–ª–æ—Ç–∞—è": {2.5: 260, 5: 520},
    "–ë–µ—Ä–µ–∑–∞ —á—É—Ä–∫–∞–º–∏": {2.5: 240, 5: 500},
    "–û–ª—å—Ö–∞ –∫–æ–ª–æ—Ç–∞—è": {2.5: 260, 5: 495},
    "–û–ª—å—Ö–∞ —á—É—Ä–∫–∞–º–∏": {2.5: 240, 5: 475},
    "–ú–∏–∫—Å(–±–µ—Ä–µ–∑–∞+–æ–ª—å—Ö–∞)–∫–æ–ª–æ—Ç–∞—è": {2.5: 260, 5: 500},
    "–ú–∏–∫—Å(–±–µ—Ä–µ–∑–∞+–æ–ª—å—Ö–∞)—á—É—Ä–∫–∞–º–∏": {2.5: 240, 5: 480},
    "–û–±—Ä–µ–∑–∫–∏ 3-4 –º–µ—Ç—Ä–∞": {5: 169},
    "–û–±—Ä–µ–∑–∫–∏ —Ä–µ–∑–∞–Ω–Ω—ã–µ (30-40 —Å–º)": {5: 235}
}

# üéØ –°–∫–∏–¥–∫–∏
discount_map = {
    "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä": 0.05,
    "–ò–Ω–≤–∞–ª–∏–¥": 0.05,
    "–ë–µ–∑ —Å–∫–∏–¥–∫–∏": 0.0
}

# üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
wood_types = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=key)] for key in firewood_prices.keys()],
    resize_keyboard=True
)

volume_types = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="2.5 –∫—É–±–∞")], [KeyboardButton(text="5 –∫—É–±–æ–≤")]],
    resize_keyboard=True
)

discount_types = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=key)] for key in discount_map.keys()],
    resize_keyboard=True
)

restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÅ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")]],
    resize_keyboard=True
)

# üåç –ì–µ–æ–∫–æ–¥–∏–Ω–≥
def get_coords(address):
    try:
        url = "https://geocode-maps.yandex.ru/1.x/"
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": address,
            "format": "json"
        }
        response = requests.get(url, params=params).json()
        members = response['response']['GeoObjectCollection']['featureMember']
        if not members:
            return None
        pos = members[0]['GeoObject']['Point']['pos']
        lon, lat = map(float, pos.split())
        return [lat, lon]
    except Exception as e:
        print(f"Geocoding error: {e}")
        return None

# üìè –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def get_distance_km(from_coords, to_coords):
    R = 6371
    lon1, lat1 = map(radians, from_coords[::-1])
    lon2, lat2 = map(radians, to_coords[::-1])
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return round(R * c, 2)

# üì© –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message()
async def handle_message(msg: types.Message):
    uid = msg.from_user.id
    text = msg.text

    if text in ["/start", "üîÅ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"]:
        user_data[uid] = {}
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥—Ä–æ–≤:", reply_markup=wood_types)
        return

    if text in firewood_prices:
        user_data[uid] = {'wood': text}
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º:", reply_markup=volume_types)
        return

    if text in ["2.5 –∫—É–±–∞", "5 –∫—É–±–æ–≤"] and 'wood' in user_data.get(uid, {}):
        selected_wood = user_data[uid]['wood']
        selected_volume = float(text.split()[0])
        if selected_volume not in firewood_prices[selected_wood]:
            await msg.answer("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –¥—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º 5 –∫—É–±–æ–≤.")
            return
        user_data[uid]['volume'] = selected_volume
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return

    if 'volume' in user_data.get(uid, {}) and 'address' not in user_data[uid]:
        user_data[uid]['address'] = text
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    if 'address' in user_data.get(uid, {}) and 'phone' not in user_data[uid]:
        user_data[uid]['phone'] = text
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–¥–∫—É:", reply_markup=discount_types)
        return

    if text in discount_map and 'phone' in user_data.get(uid, {}):
        data = user_data[uid]
        data['discount'] = text
        data['discount_rate'] = discount_map[text]

        to_coords = get_coords(data['address'])
        if not to_coords:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å –∞–¥—Ä–µ—Å.")
            return

        distance = get_distance_km(WAREHOUSE_COORDS, to_coords)
        base_price = firewood_prices[data['wood']][data['volume']]
        delivery_price = 1 * distance
        discounted_price = base_price * (1 - data['discount_rate'])
        discount_value = base_price * data['discount_rate']
        total = discounted_price + delivery_price

        summary = (
            f"üì¶ –ó–∞–∫–∞–∑:\n"
            f"–í–∏–¥ –¥—Ä–æ–≤: {data['wood']}\n"
            f"–û–±—ä–µ–º: {data['volume']} –∫—É–±–æ–≤\n"
            f"–ê–¥—Ä–µ—Å: {data['address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–°–∫–∏–¥–∫–∞: {data['discount']} ({int(data['discount_rate']*100)}%)\n"
            f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n"
            f"üí∞ –¶–µ–Ω–∞ –¥—Ä–æ–≤ (—Å–æ —Å–∫–∏–¥–∫–æ–π): {discounted_price:.2f} —Ä—É–±.\n"
            f"üîª –°–∫–∏–¥–∫–∞ –Ω–∞ –¥—Ä–æ–≤–∞: -{discount_value:.2f} —Ä—É–±.\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_price:.2f} —Ä—É–±.\n"
            f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total:.2f} —Ä—É–±."
        )

        await msg.answer(summary, reply_markup=restart_keyboard)
        await bot.send_message(ADMIN_ID, f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n{summary}")
        return

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
